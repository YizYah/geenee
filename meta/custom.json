{".eslintrc":{"unit":"standard","comp":".eslintrc","addedCode":{"lintRules":"\n    \"unicorn/no-abusive-eslint-disable\": \"off\",\n    \"array-callback-return\": \"off\",\n    \"@typescript-eslint/ban-ts-ignore\": \"off\",\n    \"max-params\": \"off\",\n    \"no-warning-comments\": \"off\",\n    \"no-await-in-loop\": \"off\",\n    \"function-paren-newline\": [\"error\", { \"minItems\": 3 }],\n    "},"replacedCode":{},"removedCode":{}},"README.md":{"unit":"standard","comp":"README.md","addedCode":{"beginning":"\n","description":"\n","afterDescription":"\n![geenee logo and video](src/custom/images/GEENEE-GIF-7.gif)\n\nCode **Re**generator.  Reapplies your template without losing your changes\n","badges":"\n\n[//]: # ( ns__start_section usageSection )\n\n[![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)\n[![Version](https://img.shields.io/npm/v/geenee.svg)](https://npmjs.org/package/geenee)\n[![Downloads/week](https://img.shields.io/npm/dw/geenee.svg)](https://npmjs.org/package/geenee)\n[![License](https://img.shields.io/npm/l/geenee.svg)](https://github.com/YizYah/geenee/blob/master/package.json)\n","beforeToc":"\n","toc":"\n<!-- toc -->\n* [Why](#why)\n* [Steps](#steps)\n* [A Funny Sample](#a-funny-sample)\n* [Usage](#usage)\n* [Commands](#commands)\n* [Help](#help)\n<!-- tocstop -->\n","usage":"\n# Why\nWhenever you use a template that later gets updated, you normally have a problem.  You can regenerate from scratch or you can't use the new version.  But with `geenee`, you can reapply the template without losing your custom code!\n\n# Steps\n1. Run `settings` if you haven't yet, and set or modify what you want to generate:\n```\nnpx geenee $CODE_PATH\n```\n\n2. You should always check first to be sure that your changes will be safe:\n```\nnpx geenee check $CODE_PATH\n```\n\n3. You should regenerate your code after you:\n* update your template (follow the instructions with its README)\n* update your settings file.\n\nHere's the command:\n  ```\n  npx geenee generate $CODE_PATH\n  ```\n\n4. After you generate, you should always run `npm i` to install everything.\n\n\nIf you would like to install `geenee` globally to save time, call:\n```\nnpm i -g geenee\n```\nThen, you can simply call the commands directly using `geenee <command>` instead of `npx geenee <command>`.\n\nSee more complete instructions below in [Usage](#usage).\n\n# A Funny Sample\n`geenee` is actually a *recursive* tool: `geenee` was generated by `geenee`! :smiley: It is based on the [easy-oclif-cli](https://www.npmjs.com/package/easy-oclif-cli) template.\n\n\n# Usage\n\n<!-- usage -->\n```sh-session\n$ npm install -g geenee\n$ geenee COMMAND\nrunning command...\n$ geenee (-v|--version|version)\ngeenee/0.0.2 linux-x64 node-v14.9.0\n$ geenee --help [COMMAND]\nUSAGE\n  $ geenee COMMAND\n...\n```\n<!-- usagestop -->\n","commands":"\n<!-- commands -->\n* [`geenee check CODE`](#geenee-check-code)\n* [`geenee generate CODE`](#geenee-generate-code)\n* [`geenee help [COMMAND]`](#geenee-help-command)\n* [`geenee settings CODE`](#geenee-settings-code)\n\n## `geenee check CODE`\n\nchecks that the code has been entered safely, meaning that regeneration won't lose any changes\n\n```\nUSAGE\n  $ geenee check CODE\n\nARGUMENTS\n  CODE  path to the code base to check\n\nOPTIONS\n  -h, --help  show CLI help\n\nEXAMPLE\n  $ geenee check sampleCode\n```\n\n_See code: [src/commands/check.ts](https://github.com/YizYah/geenee/blob/v0.0.2/src/commands/check.ts)_\n\n## `geenee generate CODE`\n\ngenerates code based on a template and a settings file. To set the template, you need the template flag.\n\n```\nUSAGE\n  $ geenee generate CODE\n\nARGUMENTS\n  CODE  path to the code base to generate\n\nOPTIONS\n  -h, --help               show CLI help\n\n  -n, --noSetup            Do not update the startup routine (this is only relevant when the template flag is also\n                           used). Saves a lot of time for a template developer.\n\n  -t, --template=template  Template directory. Will generate from the template, and will override any prior template or\n                           template version used.\n\nEXAMPLE\n  $ geenee generate sampleCode -t sampleTemplate -n\n  You have executed the generate command...\n```\n\n_See code: [src/commands/generate.ts](https://github.com/YizYah/geenee/blob/v0.0.2/src/commands/generate.ts)_\n\n## `geenee help [COMMAND]`\n\ndisplay help for geenee\n\n```\nUSAGE\n  $ geenee help [COMMAND]\n\nARGUMENTS\n  COMMAND  command to show help for\n\nOPTIONS\n  --all  see all commands in CLI\n```\n\n_See code: [@oclif/plugin-help](https://github.com/oclif/plugin-help/blob/v3.2.1/src/commands/help.ts)_\n\n## `geenee settings CODE`\n\nchange your settings for the next generation\n\n```\nUSAGE\n  $ geenee settings CODE\n\nARGUMENTS\n  CODE  path to the code base\n\nOPTIONS\n  -h, --help  show CLI help\n\nEXAMPLE\n  $ geenee settings sampleCode\n  You have executed the settings command...\n```\n\n_See code: [src/commands/settings.ts](https://github.com/YizYah/geenee/blob/v0.0.2/src/commands/settings.ts)_\n<!-- commandsstop -->\n\n\n# Help\n\n* Read our [documentation][1]\n* Post questions on our [Community](https://spectrum.chat/ns-flip)\n*  [open issues](https://github.com/NoStackApp/ns-flip/issues/new)\n"},"replacedCode":{},"removedCode":{}},"src/commands/check.ts":{"unit":"static-command","comp":"check.ts","addedCode":{"customImports":"\nconst {links, dirNames, fileNames, suffixes} = require('magicalstrings').constants\n\nimport {failsTests} from '../custom/check/failsTests'\nimport {logEntry} from '../custom/check/logEntry'\nconst {resolveDir} = require('magicalstrings').resolveDir\n\n","examples":"\n// replace this when you change your command!! To regenerate fresh, first delete everything between the squre brackets.\n  `$ geenee check sampleCode\n`,\n","run":"\n  const codeDir = resolveDir(code)\n  const testDir = `${codeDir}${suffixes.TEST_DIR}`\n  const testMetaDir = `${testDir}/${dirNames.META}`\n\n  const diffsFile = `${testMetaDir}/${fileNames.DIFFS}`\n  const logFile = `${testMetaDir}/${fileNames.TESTS_LOG}`\n\n  const problemsFound = await failsTests(codeDir)\n\n  let logMessage = `\nYou will find all files showing discrepancies in the file ${diffsFile}.\nAny discrepancy shown is a problem. See ${links.SAFE_CODE_RULES} for more info\nabout NoStack compatible code.  For specific instructions to resolve\ndiscrepancies, see ${links.TEST_RESULTS}. `\n  if (problemsFound) {\n    this.log(`\n\n:( The app did not pass the tests. :(\nSee the log file ${logFile} or the above messages for more information.`)\n    await logEntry(\n      logFile, `\n\n:( The app did not pass the tests. :(`, false\n    )\n    await logEntry(\n      logFile, logMessage, true\n    )\n\n    this.log(`For documentation: ${links.TEST_RESULTS}`)\n\n    return 1\n  }\n\n  logMessage = `\n:) The app is passing all tests! :)`\n  await logEntry(\n    logFile, logMessage, true\n  )\n\n  this.log(`Finished the test.  For documentation: ${links.DOCUMENTATION}`)\n\n  return 0\n  "},"replacedCode":{},"removedCode":{}},"src/commands/generate.ts":{"unit":"static-command","comp":"generate.ts","addedCode":{"customImports":"\nconst {links} = require('magicalstrings').constants\nconst {resolveDir} = require('magicalstrings').resolveDir\nimport {createCodeBase} from '../custom/generateCommand/createCodeBase'\n\n","examples":"\n// replace this when you change your command!! To regenerate fresh, first delete everything between the squre brackets.\n  `$ geenee generate sampleCode -t sampleTemplate -n\nYou have executed the generate command...\n`,\n","run":"\n  const codeDir = resolveDir(code)\n  const templateDir = resolveDir(template)\n  try {\n    await createCodeBase(\n      templateDir, codeDir, noSetup\n    )\n  } catch (error) {\n    this.log(error)\n    throw new Error(`problem generating code: ${error}`)\n  }\n\n  this.log(`Generated the code at ${codeDir}.  For documentation: ${links.DOCUMENTATION}`)\n  "},"replacedCode":{},"removedCode":{}},"src/commands/settings.ts":{"unit":"static-command","comp":"settings.ts","addedCode":{"customImports":"\nimport {settingsMenu} from '../custom/settings/settingsMenu'\nimport {promptToGenerateCode} from '../custom/settings/promptToGenerateCode'\nconst {getConfig} = require('magicalstrings').configs\nconst {dirNames} = require('magicalstrings').constants\nconst {getNsInfo} = require('magicalstrings').nsFiles\nconst {resolveDir} = require('magicalstrings').resolveDir\nconst diff = require('deep-object-diff').diff\n","examples":"\n// replace this when you change your command!! To regenerate fresh, first delete everything between the squre brackets.\n  `$ geenee settings sampleCode\nYou have executed the settings command...\n`,\n","run":"\n  const codeDir = resolveDir(code)\n\n  try {\n    const config = await getConfig(codeDir +\n      `/${dirNames.META}/${dirNames.TEMPLATE}`)\n    const nsInfo = await getNsInfo(codeDir)\n    const originalSettings = JSON.parse(JSON.stringify(nsInfo))\n\n    const updatedSettings = await settingsMenu(\n      config, nsInfo, codeDir\n    )\n    if (!updatedSettings) return\n\n    const changedSettings = diff(originalSettings, updatedSettings)\n    if (Object.keys(changedSettings).length > 0) {\n      // there were changes to the settings made\n      await promptToGenerateCode(codeDir)\n    }\n  } catch (error) {\n    this.error(error)\n    throw new Error(`error with settings: ${error}`)\n  }\n  "},"replacedCode":{},"removedCode":{}},"test/commands/check.test.ts":{"unit":"static-command","comp":"check.test.ts","addedCode":{"customImports":"\n","tests":"\n// replace everything in this tests section when you modify your code.\ndescribe('check', () => {\n  test\n  .stderr()\n  .command(['check', 'nonexistentFile'])\n  .catch(error => {\n    expect(error.message).to.contain('no such file or directory')\n  }).timeout(20000)\n  .it('requires existent code base')\n})\n"},"replacedCode":{},"removedCode":{}},"test/commands/generate.test.ts":{"unit":"static-command","comp":"generate.test.ts","addedCode":{"customImports":"\n","tests":"\n// replace everything in this tests section when you modify your code.\ndescribe('generate', () => {\n  test\n  .stderr()\n  .command(['generate', '-t', 'nonExistentTemplate', '--noSetup'])\n  .catch(error => {\n    expect(error.message).to.contain('Missing 1 required arg')\n  })\n  .it('requires existing template')\n\n  test\n  .stderr()\n  .command(['generate', 'nonExistentCodeBase', '-t', 'nonExistentTemplate', '--noSetup'])\n  .catch(error => {\n    expect(error.message).to.contain('no such file or directory')\n  })\n  .it('requires existing template')\n})\n"},"replacedCode":{},"removedCode":{}},"test/commands/settings.test.ts":{"unit":"static-command","comp":"settings.test.ts","addedCode":{"customImports":"\n","tests":"\n// replace everything in this tests section when you modify your code.\ndescribe('settings', () => {\n  test\n  .stderr()\n  .command(['settings'])\n  .catch(error => {\n    expect(error.message).to.contain('Missing 1 required arg')\n  })\n  .it('requires existent code base')\n})\n"},"replacedCode":{},"removedCode":{}}}
