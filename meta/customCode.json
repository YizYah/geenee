{
  "addedCode": {
    "standard": {
      ".eslintrc": {
        "path": ".eslintrc",
        "lintRules": "\n    \"unicorn/filename-case\": \"off\",\n    \"unicorn/no-abusive-eslint-disable\": \"off\",\n    \"array-callback-return\": \"off\",\n    \"@typescript-eslint/ban-ts-ignore\": \"off\",\n    \"max-params\": \"off\",\n    \"no-warning-comments\": \"off\",\n    \"no-await-in-loop\": \"off\",\n    \"function-paren-newline\": [\"error\", { \"minItems\": 3 }]\n    "
      },
      "README.md": {
        "path": "README.md",
        "beginning": "\n",
        "description": "\nCode Regenerator.  Reapplies your template without losing your changes\n",
        "afterDescription": "\n![geenee logo and video](src/custom/images/GEENEE-GIF-7.gif)\n",
        "badges": "\n\n[//]: # ( ns__start_section usageSection )\n[![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)\n[![Version](https://img.shields.io/npm/v/copykat.svg)](https://npmjs.org/package/copykat)\n[![Downloads/week](https://img.shields.io/npm/dw/copykat.svg)](https://npmjs.org/package/copykat)\n[![License](https://img.shields.io/npm/l/copykat.svg)](https://github.com//blob/master/package.json)\n",
        "beforeToc": "\nA re-generator tool.  That means that you can release your generator and then make changes as needed.  Whenever you update it,\nyour users can apply them without losing their custom changes.  See more complete instructions below in [Usage](#usage).\n\nFor an example, see [easy-oclif-cli](https://www.npmjs.com/package/easy-oclif-cli).\n",
        "toc": "\n<!-- toc -->\n* [Usage](#usage)\n* [Commands](#commands)\n<!-- tocstop -->\n",
        "usage": "\n# Usage\n## (1) Create a Template\nTo create the template, define:\n1. **MODEL_DIR** a directory for the code that will be the basis for your generator\n2. **TEMPLATE_DIR** the directory for your template\n\nThen, run\n```\ncopycat pounce $MODEL_DIR -t $TEMPLATE_DIR\n```\nand follow the directions.\n\n(2) Hone the results\n```\ncopycat chase $TEMPLATE_DIR\n```\nYou will be directed through the process.\n\n<!-- usage -->\n```sh-session\n$ npm install -g copykat\n$ copykat COMMAND\nrunning command...\n$ copykat (-v|--version|version)\ncopykat/0.1.1 linux-x64 node-v14.9.0\n$ copykat --help [COMMAND]\nUSAGE\n  $ copykat COMMAND\n...\n```\n<!-- usagestop -->\n",
        "commands": "\n<!-- commands -->\n* [`copykat chase TEMPLATEDIR`](#copykat-chase-templatedir)\n* [`copykat help [COMMAND]`](#copykat-help-command)\n* [`copykat pounce MODEL`](#copykat-pounce-model)\n\n## `copykat chase TEMPLATEDIR`\n\ncompare generated code to your model, changing both until you've replicated the model with your template\n\n```\nUSAGE\n  $ copykat chase TEMPLATEDIR\n\nARGUMENTS\n  TEMPLATEDIR  the path to your template\n\nOPTIONS\n  -h, --help  show CLI help\n\nEXAMPLE\n  $ copykat chase sampleTemplateDir\n```\n\n_See code: [src/commands/chase.ts](https://github.com/YizYah/copykat/blob/v0.1.1/src/commands/chase.ts)_\n\n## `copykat help [COMMAND]`\n\ndisplay help for copykat\n\n```\nUSAGE\n  $ copykat help [COMMAND]\n\nARGUMENTS\n  COMMAND  command to show help for\n\nOPTIONS\n  --all  see all commands in CLI\n```\n\n_See code: [@oclif/plugin-help](https://github.com/oclif/plugin-help/blob/v3.2.1/src/commands/help.ts)_\n\n## `copykat pounce MODEL`\n\nspecify a model code base and generate a template to build it\n\n```\nUSAGE\n  $ copykat pounce MODEL\n\nARGUMENTS\n  MODEL  path to a model code base from which you will generate your template\n\nOPTIONS\n  -h, --help                     show CLI help\n  -t, --templateDir=templateDir  path to the generator that you will build\n\nEXAMPLE\n  $ copykat pounce sampleModel -t sampleTemplateDir\n```\n\n_See code: [src/commands/pounce.ts](https://github.com/YizYah/copykat/blob/v0.1.1/src/commands/pounce.ts)_\n<!-- commandsstop -->\n"
      }
    },
    "static-command": {
      "chase.ts": {
        "path": "src/commands/chase.ts",
        "customImports": "\nimport {removeCodeModelDiscrepancies} from '../custom/templates/discrepancies/removeCodeModelDiscrepancies'\n\nconst {resolveDir} = require('magicalstrings').resolveDir\nconst {suffixes} = require('magicalstrings').constants\nconst {dingKats} = require('magicalstrings').constants.types.dingKats\n",
        "examples": "\n  `$ copykat chase sampleTemplateDir\n`,\n",
        "run": "\n  const finalTemplateDir = resolveDir(templateDir)\n  const code = finalTemplateDir + suffixes.SAMPLE_DIR\n  const model = finalTemplateDir + suffixes.MODEL_DIR\n\n  try {\n    await removeCodeModelDiscrepancies(\n      finalTemplateDir, code, model\n    )\n  } catch (error) {\n    this.log(error)\n    this.error(dingKats.ERROR + ` cannot compare directories: ${error}`)\n  }\n\n  "
      },
      "pounce.ts": {
        "path": "src/commands/pounce.ts",
        "customImports": "\nimport {createNewTemplate} from '../custom/templates/new/createNewTemplate'\nimport {printInstructionsForNewTemplate} from '../custom/templates/new/printInstructionsForNewTemplate'\nconst {resolveDir} = require('magicalstrings').resolveDir\nconst {dingKats} = require('magicalstrings').constants.types\nconst {suffixes} = require('magicalstrings').constants\nimport {removeCodeModelDiscrepancies} from '../custom/templates/discrepancies/removeCodeModelDiscrepancies'\n\n",
        "examples": "\n// replace this when you change your command!! To regenerate fresh, first delete everything between the squre brackets.\n  `$ copykat pounce sampleModel -t sampleTemplateDir\n`,\n",
        "run": "\n  let finalTemplateDir = ''\n  try {\n    finalTemplateDir = await createNewTemplate(resolveDir(model), resolveDir(templateDir))\n    this.log(printInstructionsForNewTemplate(finalTemplateDir))\n  } catch (error) {\n    this.log(dingKats.ERROR + ` cannot create template: ${error}`)\n    return\n  }\n\n  const code = finalTemplateDir + suffixes.SAMPLE_DIR\n  const newModel = finalTemplateDir + suffixes.MODEL_DIR\n\n  try {\n    await removeCodeModelDiscrepancies(\n      finalTemplateDir, code, newModel\n    )\n  } catch (error) {\n    this.log(dingKats.ERROR + ` cannot compare directories: ${error}`)\n  }\n\n  "
      },
      "chase.test.ts": {
        "path": "test/commands/chase.test.ts",
        "customImports": "\nconst {resolveDir} = require('magicalstrings').resolveDir\n\n",
        "tests": "\n// replace everything in this tests section when you modify your code.\ndescribe('chase command', () => {\n  const bogusTemplateDir = 'nonexistentTemplate'\n  const fullBogusTemplateDir = resolveDir(bogusTemplateDir)\n\n  test\n  .stderr()\n  .command(['chase', fullBogusTemplateDir])\n  .catch(error => {\n    expect(error.message).to.contain(`template directory ${fullBogusTemplateDir} not found`)\n  })\n  .it('requires proper args')\n\n  // test\n  // .stdout()\n  // .command(['chase', fullBogusTemplateDir])\n  // .it('runs chase with all args and flags', ctx => {\n  //   expect(ctx.stdout).to.contain('foo')\n  // })\n})\n"
      },
      "pounce.test.ts": {
        "path": "test/commands/pounce.test.ts",
        "customImports": "\nconst {resolveDir} = require('magicalstrings').resolveDir\n\n",
        "tests": "\n// replace everything in this tests section when you modify your code.\ndescribe('pounce', () => {\n  const bogusModelDir = 'nonexistentSampleModel'\n  const fullBogusModelDir = resolveDir(bogusModelDir)\n  // test\n  // .stderr()\n  // .command(['pounce', bogusModelDir, '-t', 'nonexistentTemplateDir'])\n  // .catch(error => {\n  //   expect(error.message).to.contain(`model directory ${fullBogusModelDir} not found`)\n  // })\n  // .it('requires proper args')\n\n  test\n  .stdout()\n  .command(['pounce', bogusModelDir, '-t', 'nonexistentTemplateDir'])\n  .it('runs pounce with all args and flags', ctx => {\n    expect(ctx.stdout).to.contain(`model directory ${fullBogusModelDir} not found`)\n  })\n})\n"
      }
    }
  },
  "replacedCode": {},
  "removedCode": {}
}
